<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <title>GTFS Routes with OSRM</title>
    <link
      rel='stylesheet'
      href='https://unpkg.com/leaflet@1.7.1/dist/leaflet.css'
    />
    <link
      rel='stylesheet'
      href='https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css'
    />
    <script src='https://unpkg.com/leaflet@1.7.1/dist/leaflet.js'></script>
    <script
      src='https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js'
    ></script>
  </head>
  <body>
    <h1>GTFS Routes with OSRM Routing</h1>
    <div id='map' style='height: 600px'></div>

    <script>
      // Dynamically generated GeoJSON data passed in the context const
      geoJsonData =
      {{{geoJsonData}}}; // Initialize the map const map =
      L.map('map').setView([0.0236, 37.9062], 6); // Set initial view to Africa
      // Add tile layer
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors', }).addTo(map); //
      Function to get route from OSRM async function getRouteFromOSRM(start,
      end) { const osrmUrl =
      `https://router.project-osrm.org/route/v1/driving/${start[1]},${start[0]};${end[1]},${end[0]}?overview=full&geometries=geojson`;
      const response = await fetch(osrmUrl); const data = await response.json();
      return data.routes[0].geometry.coordinates; // Return the coordinates of
      the route } // Add markers and routes to the map async function
      addRoutes() { const markers = []; // Loop through the GTFS stops and add
      markers geoJsonData.features.forEach((feature, index) => { const stop =
      feature.geometry.coordinates; const marker = L.marker([stop[1], stop[0]])
      .addTo(map) .bindPopup( `<b>${feature.properties.stop_name}</b><br>Stop
      ID: ${feature.properties.stop_id}`, ); markers.push([stop[1], stop[0]]);
      }); // Loop through stops and fetch route from OSRM for each consecutive
      stop for (let i = 0; i < markers.length - 1; i++) { const start =
      markers[i]; const end = markers[i + 1]; // Fetch route from OSRM const
      routeCoordinates = await getRouteFromOSRM(start, end); // Draw the route
      on the map as a polyline const polyline = L.polyline(
      routeCoordinates.map((coord) => [coord[1], coord[0]]), { color: 'blue',
      weight: 5, opacity: 0.7, }, ).addTo(map); } // Adjust map view to fit all
      markers map.fitBounds(markers.map((marker) => [marker[0], marker[1]])); }
      // Call the function to add routes addRoutes();
    </script>
  </body>
</html>